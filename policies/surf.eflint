// SURF.eflint
//   by Tim MÃ¼ller
// 
// Defines the policy as used by the SURF domain.
// 
// The policies of SURF are very simple, as very few people have any rights to do anything.
// 
// Only the final result(s) in either scenario may be openly downloaded.
// 

#include "model.eflint".


// This rule enforces that all tasks executed by SURF _must_ be tasks from one of the given pre-
// approved packages (i.e., SURF will not execute anything else).
Extend Act execute
    Conditioned by (
        // We approve any execution that is not done by us OR, if it is, is only some possible
        // packages.
        domain != domain("surf")
        || call.task.package == "epi_rosanne" || call.task.package == "classifier"
        || call.task.package == "synthetic"
    ).



/// This rule enforces that all transfers from SURF's domain are only about the final results of
/// the workflows, OR a hospital requesting access to the general model.
Extend Act transfer
    Conditioned by (
        // We ignore any transfers not originating from us
        sender != domain("surf")
        || (
            // Ourselves are always allowed
            receiver == domain("surf")
            // Otherwise, the data is the result of a `central_scs` (scenario 1)
            || (Forall call-output':
                call-output'.call.task == task(package("epi_rosanne"), "central_scs")
                && assigned-to(call-output'.call, domain("surf"))
                When call-output'.data == data
            )
            // Or the `validate`/`generate` function (scenario 2)
            || (Forall call-output':
                (call-output'.call.task == task(package("classifier"), "validate")
                 || call-output'.call.task == task(package("synthetic"), "generate"))
                && assigned-to(call-output'.call, domain("surf"))
                When call-output'.data == data
            )
            // It can also be one of the hospitals requesting central model data (also scenario 2)
            || (
                (receiver == domain("st_antonius") || receiver == domain("umc_utrecht"))
                && (Forall call-output':
                    (call-output'.call.task == task(package("classifier"), "init")
                    || call-output'.call.task == task(package("classifier"), "central")
                    || call-output'.call.task == task(package("synthetic"), "init")
                    || call-output'.call.task == task(package("synthetic"), "central"))
                    && assigned-to(call-output'.call, domain("surf"))
                    When call-output'.data == data
                )
            )
        )
    ).



/// This rule enforces that all transfers from SURF's domain are only about the final results of
/// the workflows, but then for transfers not done in the context of a task.
Extend Act download
    Conditioned by (
        // We ignore any transfers not originating from us
        sender != domain("surf")
        || (
            // Ourselves are always allowed
            receiver == domain("surf")
            // Otherwise, the data is the result of a `central_scs` (scenario 1)
            || (Forall call-output':
                call-output'.call.task == task(package("epi_rosanne"), "central_scs")
                && assigned-to(call-output'.call, domain("surf"))
                When call-output'.data == data
            )
            // Or the `validate`/`generate` function (scenario 2)
            || (Forall call-output':
                (call-output'.call.task == task(package("classifier"), "validate")
                 || call-output'.call.task == task(package("synthetic"), "generate"))
                && assigned-to(call-output'.call, domain("surf"))
                When call-output'.data == data
            )
        )
    ).
